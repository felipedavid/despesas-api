// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translations

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"en_US": &dictionary{index: en_USIndex, data: en_USData},
		"pt_BR": &dictionary{index: pt_BRIndex, data: pt_BRData},
	}
	fallback := language.MustParse("en-US")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"can only be BANK or CREDIT":           5,
	"cannot be empty":                      6,
	"cannot be greater than 200":           3,
	"email already exists":                 1,
	"must be an integer value":             0,
	"must be provided":                     4,
	"should be 26 bytes long":              8,
	"should be at least 3 characters long": 9,
	"should be at least 8 characters long": 7,
	"should be greater than zero":          2,
}

var en_USIndex = []uint32{ // 11 elements
	0x00000000, 0x00000019, 0x0000002e, 0x0000004a,
	0x00000065, 0x00000076, 0x00000091, 0x000000a1,
	0x000000c6, 0x000000de, 0x00000103,
} // Size: 68 bytes

const en_USData string = "" + // Size: 259 bytes
	"\x02must be an integer value\x02email already exists\x02should be greate" +
	"r than zero\x02cannot be greater than 200\x02must be provided\x02can onl" +
	"y be BANK or CREDIT\x02cannot be empty\x02should be at least 8 character" +
	"s long\x02should be 26 bytes long\x02should be at least 3 characters lon" +
	"g"

var pt_BRIndex = []uint32{ // 11 elements
	0x00000000, 0x00000017, 0x00000028, 0x00000040,
	0x0000005c, 0x00000072, 0x00000091, 0x000000a7,
	0x000000c7, 0x000000f1, 0x00000111,
} // Size: 68 bytes

const pt_BRData string = "" + // Size: 273 bytes
	"\x02precisa ser um inteiro\x02email já existe\x02deve ser maior que zero" +
	"\x02não pode ser maior que 200\x02precisa ser informado\x02pode ser apen" +
	"as BANK ou CREDIT\x02não pode estar vazio\x02deve ter pelomenos 8 caract" +
	"eres\x02deveria ter pelomenos 26 bytes de tamanho\x02deve ter pelomenos " +
	"3 caracteres"

	// Total table size 668 bytes (0KiB); checksum: E2DADF87
